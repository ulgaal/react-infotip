{"src/Storage.js":[{"description":"The `Storage` component is in charge of persisting tips for all the\n`Source`s of the React subtree of which it is the root.\nA `Storage` invokes the handler specified in the `onTipChange` property\n when its list of persistent tips changes.\nUsing `Storage` usually implies that:\n* a `Pinnable` wrapper component is used for the tips, so that\nthe user can pin them down them and drag them around.\n* `Source`s do not provide their tips as usual using the `tip` config key.\nInstead they provide an `id` key to uniquely identify themselves.\n* the `tip` config key of `Storage` provides all the tips\nfor the subtree. It must be defined as a function which receives as\ninput a `Source` `id` and outputs the corresponding tip.","displayName":"Storage","methods":[],"props":{"tips":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"StorageTip"}},"required":false,"description":"An array of persisted `<StoredTipType>`.\n\n`<StoredTipType>` is an object, which contains the following keys:\n\n| Key | Type             | Description                                                |\n| --- | ---------------- | ---------------------------------------------------------- |\n| id  | `<string>`       | The id property of the `<Source>` to which the tip belongs |\n| my  | `<CornerType>`   | The corner of the tip to which the tail attaches           |\n| location  | `<LocationType>` | The current tip location                                   |\n| config  | `<ConfigType>` | The tip config (see Source for details on `<ConfigType>`)           |\n\n`<LocationType>` is an object, which contains the following keys:\n\n| Key  | Type       | Description                                                         |\n| ---- | ---------- | ------------------------------------------------------------------- |\n| left | `<number>` | The x coordinate of the tip in the tip-container coordinate system. |\n| top  | `<number>` | The y coordinate of the tip in the tip-container coordinate system. |"},"tip":{"type":{"name":"func"},"required":false,"description":"A function which receives as input a `Source` `id` and outputs the corresponding React tip\nelement. The returned component should have its `key` property set to uniquely identify\nit among the children of the `Storage`."},"onTipChange":{"type":{"name":"func"},"required":false,"description":"A callback function invoked when the list of persistent tip changes.\nThe function receives an array of `<StoredTipType>`"},"disabled":{"type":{"name":"bool"},"required":false,"description":"True to make the storage ignore DOM events and stop showing\nor hiding new tips, false (default) otherwise","defaultValue":{"value":"false","computed":false}}}}],"src/Source.js":[{"description":"The `Source` component acts as a wrapper for other components and enables them\nto provide tips.","displayName":"Source","methods":[],"props":{"tip":{"type":{"name":"node"},"required":false,"description":"The tip content as a React node"},"pinned":{"type":{"name":"bool"},"required":false,"description":"`true` to make the tip always visible, `false` otherwise","defaultValue":{"value":"false","computed":false}},"config":{"type":{"name":"custom","raw":"SourceConfig"},"required":false,"description":"The tip `config`, as an object which contains the following keys:\n\n| Key           | Type             | Description                                         |\n|---------------|------------------|-----------------------------------------------------|\n| position      | `<PositionType>` | sub-configuration describing the tip position       |\n| show          | `<ShowType>`     | sub-configuration describing how the tip is shown   |\n| hide          | `<HideType>`     | sub-configuration describing how the tip is hidden  |\n| wrapper       | `<component>`    | The component to instantiate to wrap the tip        |\n| wrapperProps  | `<object>`       | The React properties for the wrapper component      |\n\n`<PositionType>` is an object, which contains the following keys:\n\n| Key           | Type                   | Description                                                   |\n|---------------|------------------------|---------------------------------------------------------------|\n| my            | `<CornerType>`         | The corner of the tip to position in relation to the `at` key |\n| at            | `<CornerType>`         | The corner of `target` element to position the tip corner at  |\n   | target        | `<target-spec>`        | The element the tip will be positioned in relation to. Can be one of <dl><dt>false</dt><dd>the source itself (default)</dd><dt>[&lt;number&gt;, &lt;number&gt;]</dt><dd>an array of x, y coordinates</dd><dt>'mouse'</dt><dd>the mouse coordinates for the event which triggered the tip to show</dd><dt>&lt;string&gt;</dt><dd>CSS selector for another DOMElement</dd></dl>   |\n  | adjust        | `<AdjustType>`         | sub-configuration describing how the tip position should be adjusted |\n  | container     | `<string>` | CSS selector to the DOMElement under which tips will attached.      |\n\n`<CornerType>` is one of the following enumeration value:\n* top-left\n* top-center\n* top-right\n* center-left\n* center-right\n* bottom-left\n* bottom-center\n* bottom-right\n\n`<AdjustType>` is an object, which contains the following keys:\n\n| Key           | Type                   | Description                                                   |\n|---------------|------------------------|---------------------------------------------------------------|\n  | mouse         | `<mouse-spec>`         | Describes how mouse movement affects the tip placement. Can be one of <dl><dt>false</dt><dd>do not adjust to mouse move (default)</dd><dt>true</dt><dd>adjust to mouse move</dd><dt><pre>function: event =&gt; ({ x, y })</pre></dt><dd>compute the position of the tip using a function which receives mouse move event as input</dd></dl>\n| x             | `<number>`             | x-translation the tip (0 by default)\n| y             | `<number>`             | y-translation the tip (0 by default)\n  | method        | `<method-spec>`        | Decribes the method to use to optimize tip placement inside its container. Can be one of <dl><dt>none</dt><dd>no placement adjustment (default)</dd><dt>{ flip: [&lt;CornerType&gt; (, &lt;CornerType&gt;)\\* ] }</dt><dd>pick the corner which maximizes overlap between the tip and its container</dd><dt>{ shift: [&lt;AxisType&gt; (, &lt;AxisType&gt;)\\*]}</dt><dd>keep the tip inside its container for the specified axis</dd></dl>\n\n`<AxisType>` is one of the following enumeration value:\n* horizontal\n* vertical\n\n`<ShowType>` is an object, which contains the following keys:\n\n| Key        | Type         | Description                                                                        |\n|------------|--------------|------------------------------------------------------------------------------------|\n| delay      | `<number>`   | Delay between mouse enter event in the source and the tip display (0ms by default) |\n\n`<HideType>` is an object, which contains the following keys:\n\n| Key        | Type         | Description                                                                        |\n|------------|--------------|------------------------------------------------------------------------------------|\n| delay      | `<number>`   | Delay between mouse leave event from the source or the tip and removal of the tip (0ms by default) |"},"svg":{"type":{"name":"bool"},"required":false,"description":"Must to set to `true` if the source wraps an SVG element, `false` otherwise","defaultValue":{"value":"false","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"If the `Source` is contained in a `Storage`, an id which uniquely identifies\nthis `Source` within its `Storage`"},"disabled":{"type":{"name":"bool"},"required":false,"description":"True to make the source ignore DOM events and stop showing\nor hiding new tips, false (default) otherwise","defaultValue":{"value":"false","computed":false}}}}],"src/Pinnable.js":[{"description":"A `Pinnable` component adds an inner decorator between\nthe wrapper component and the content component. This decorator\nprovides the ability to pin down a tip and to drag it around.","displayName":"Pinnable","methods":[],"props":{"pinned":{"type":{"name":"bool"},"required":false,"description":"`true` to display an pinned push-pin, `false` otherwise"},"wrapper":{"type":{"name":"elementType"},"required":false,"description":"The wrapper component type to use"},"onPin":{"type":{"name":"func"},"required":false,"description":"A callback function to invoke when the push-pin is clicked (used to toggle the `pinned` property)"},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"A callback function to invoke the component is clicked (used to implement tip dragging)"}}}],"src/Balloon.js":[{"description":"A `Balloon` component wraps another React component in\na balloon-shaped styleable wrapper.\n\nGraphically a `Balloon` is composed of a bubble and a tail which points towards\nthe elements from which the balloon originates.\n\nIt has the following structure:\n```html\n<span> // Span to position the bubble and the tail using absolute positioning\n <span> // Bubble span\n  ... tip content\n </span>\n <SvgTail/> // Tail (overlaps the border of the bubble)\n</span>\n```","displayName":"Balloon","methods":[],"props":{"my":{"type":{"name":"custom","raw":"CornerType"},"required":false,"description":"The corner of the balloon to which the tail attaches","defaultValue":{"value":"'top-left'","computed":false}},"tail":{"type":{"name":"custom","raw":"TailType"},"required":false,"description":"The size of the ballon tail","defaultValue":{"value":"{ width: 8, height: 8 }","computed":false}},"dispatch":{"type":{"name":"func"},"required":false,"description":"A dispatch function invoked when the geometry of the balloon changes.\nThe function receives a GEOMETRY action with the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| corners  | `<CornersType>` | The position of the `Balloon`'s tail end for all possible tail configurations. |\n| size | `<SizeType>`    | The size of the `Balloon`.                                                     |\n\nCornersType\n\n`<CornersType>` is an object, which contains the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| top-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| top-center  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-center. |\n| top-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-right. |\n| center-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to center-left. |\n| center-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to center-right. |\n| bottom-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| bottom-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to bottom-center. |\n| bottom-center  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| bottom-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to bottom-right. |\n\n`<SizeType>` is an object, which contains the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| width  | `<number>` | Width of the wrapper. |\n| height  | `<number>` | height of the wrapper. |"},"style":{"type":{"name":"object"},"required":false,"description":"The CSS style to use to render the balloon","defaultValue":{"value":"styles.defaultStyle","computed":true}},"className":{"type":{"name":"string"},"required":false,"description":"A CSS class specification to use to render the ballon (if used, will replace `style`)"},"pinned":{"type":{"name":"bool"},"required":false,"description":"`true` if the balloon is pinned to the screen"},"id":{"type":{"name":"string"},"required":false,"description":"If the balloon is contained in a `Storage`, an id which uniquely identifies\nthe `Source` to which this balloon belongs"}}}],"src/Cloud.js":[{"description":"A `Cloud` component wraps another React component in\na cloud-shaped styleable wrapper.\n\nGraphically a `Cloud` is composed of a cloud outline and a content.\nThe cloud shape is randomly computed using just a `folds` parameter\nwhich indicates the number of folds the cloud `Cloud` have.\n\nIt has the following structure:\n```html\n<div> // div to position the cloud outline and the content using absolute positioning\n <SvgCloud/> // Cloud outline\n <span> // Cloud content (overlaps the outline)\n  ... tip content\n </span>\n</div>\n```","displayName":"Cloud","methods":[],"props":{"my":{"type":{"name":"custom","raw":"CornerType"},"required":false,"description":"The corner of the cloud to which the tail attaches","defaultValue":{"value":"'top-left'","computed":false}},"tail":{"type":{"name":"custom","raw":"TailType"},"required":false,"description":"The size of the cloud tail","defaultValue":{"value":"{\n  width: 25,\n  height: 25\n}","computed":false}},"folds":{"type":{"name":"number"},"required":false,"description":"The number of randomly generated cloud folds","defaultValue":{"value":"13","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"The CSS style to use to render the cloud","defaultValue":{"value":"styles.defaultStyle","computed":true}},"dispatch":{"type":{"name":"func"},"required":false,"description":"A dispatch function invoked when the geometry of the cloud changes.\nThe function receives a GEOMETRY action with the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| corners  | `<CornersType>` | The position of the `Balloon`'s tail end for all possible tail configurations. |\n| size | `<SizeType>`    | The size of the `Balloon`.                                                     |\n\nCornersType\n\n`<CornersType>` is an object, which contains the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| top-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| top-center  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-center. |\n| top-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-right. |\n| center-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to center-left. |\n| center-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to center-right. |\n| bottom-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| bottom-left  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to bottom-center. |\n| bottom-center  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to top-left. |\n| bottom-right  | `<LocationType>` | The position of the wrapper's tail end when the `my` property is set to bottom-right. |\n\n`<SizeType>` is an object, which contains the following keys:\n\n| Key  | Type            | Description                                                                    |\n| ---- | --------------- | ------------------------------------------------------------------------------ |\n| width  | `<number>` | Width of the wrapper. |\n| height  | `<number>` | height of the wrapper. |"},"pinned":{"type":{"name":"bool"},"required":false,"description":"`true` if the cloud is pinned to the screen"},"id":{"type":{"name":"string"},"required":false,"description":"If the cloud is contained in a `Storage`, an id which uniquely identifies\nthe `Source` to which this cloud belongs"}}}]}